openapi: 3.0.3
info:
  title: The Brew Ha Ha API
  version: 1.0.0
  description: The Brew Ha Ha API allows third-party applications to access our extensive
    line of coffee and snack products. As a developer, you can access various endpoints
    to get a single product, get a collection of products, or place orders. Our API
    enables seamless integration with popular e-commerce platforms such as Shopify,
    Wix, and Square.
paths:
  /api/orders/:
    post:
      operationId: create_order
      description: Order available products from the database
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              SuccessfulResponse:
                value:
                - id: '13'
                  payment_method: Credit
                  order_date: '2025-01-11T03:17:47.746025Z'
                  status: in progress
                  order_items:
                  - product_id: 2
                    quantity: 1
                    product_name: blueberry muffin
                summary: Successful Response
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                SuccessfulResponse:
                  value:
                  - id: '13'
                    payment_method: Credit
                    order_date: '2025-01-11T03:17:47.746025Z'
                    status: in progress
                    order_items:
                    - product_id: 2
                      quantity: 1
                      product_name: blueberry muffin
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: The requested resource was not found
                  summary: Not Found
          description: ''
  /api/orders/{id}/:
    get:
      operationId: retrieve_orders
      description: Returns a single order from the database
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                SuccessfulResponse:
                  value:
                  - id: '13'
                    payment_method: Credit
                    order_date: '2025-01-11T03:17:47.746025Z'
                    status: in progress
                    order_items:
                    - product_id: 2
                      quantity: 1
                      product_name: blueberry muffin
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: No product matches the given query.
                  summary: Not Found
          description: ''
  /api/products/:
    get:
      operationId: list_products
      description: Returns a list of all products in the database
      tags:
      - products
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                SuccessfulResponse:
                  value:
                  - - id: 1
                      product_name: mocha
                      temperature: hot
                      caffeine_amount: 105
                      price: 3.75
                      description: A rich, decadent blend of espresso and chocolate
                      quantity: 8
                    - id: 2
                      product_name: muffin
                      price: 2.5
                      description: A fluffy, warm blueberry muffin
                      quantity: 5
                    - id: 3
                      product_name: cortado
                      temperature: hot
                      caffeine_amount: 130
                      price: 4.0
                      description: Made with beans picked from the coast of Spain
                      quantity: 5
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: No product matches the given query.
                  summary: Not Found
          description: ''
  /api/products/{id}/:
    get:
      operationId: retrieve_products
      description: Returns a single product from the database
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - products
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                SuccessfulResponse:
                  value:
                  - id: 1
                    product_name: mocha
                    temperature: hot
                    caffeine_amount: 105
                    price: 3.75
                    description: A rich, decadent blend of espresso and chocolate
                    quantity: 8
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                NotFound:
                  value:
                    detail: No product matches the given query.
                  summary: Not Found
          description: ''
  /api/tokens/:
    post:
      operationId: tokens_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/tokens/refresh/:
    post:
      operationId: tokens_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    BadRequest:
      type: object
      properties:
        detail:
          type: string
          default: The request body could not be read properly.
    NotFound:
      type: object
      properties:
        detail:
          type: string
          default: The requested resource was not found.
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: The unique order id
        payment_method:
          type: string
          description: The payment method used
        order_date:
          type: string
          format: date-time
          readOnly: true
          description: Order date
        status:
          type: string
          readOnly: true
          description: Order status
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: The items in the customer's order. Provide the `product_id`
            and quantity for each product.
      required:
      - id
      - order_date
      - order_items
      - payment_method
      - status
    OrderItem:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        product_name:
          type: string
          readOnly: true
      required:
      - product_id
      - product_name
      - quantity
    Product:
      type: object
      description: |-
        Serializer for the product model.

        Converts Product model instances into JSON format.

        Fields:
            id (int): A unique integer value identifying this product.
            product_name (str): The name of the product, e.g. 'Muffin', 'Espresso'
            temperature (str): The serving temperature for coffees, e.g. 'Hot', 'Iced'
            caffeine_amount (int): The amount of caffeine in milligrams.
            price (float): The price of the product in USD.
            description (str): A short description of the product.
            quantity (int): Amount of product available
      properties:
        id:
          type: integer
          description: A unique integer value identifying this product.
        product_name:
          type: string
          description: The product name
        temperature:
          type: string
          description: Drink temperature
        caffeine_amount:
          type: integer
          description: Caffeine amount in milligrams
        price:
          type: number
          format: double
          description: The price of the product in USD
        description:
          type: string
          description: A description of the product
        quantity:
          type: integer
          description: Amount of product available
      required:
      - description
      - id
      - price
      - product_name
      - quantity
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    Unauthorized:
      type: object
      properties:
        detail:
          type: string
          default: Authentication credentials were not provided.
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
        Bearer {token}"'
tags:
- name: tokens
  description: Use these endpoints generate a JSON Web Token (JWT) to authenticate
    your credentials.
- name: orders
  description: Use this endpoint to submit a new order.
- name: products
  description: Use this endpoint to get a single product or a list of products from
    the database.

openapi: 3.0.3
info:
  title: The Brew Ha Ha API
  version: 1.0.0
  description: The Brew Ha Ha API allows you to programmatically access our products,
    securely manage orders, and streamline purchases.
paths:
  /api/coffees/:
    get:
      operationId: get_all_coffees
      description: Get all coffees in the inventory. The response includes information
        about each coffee's type, temperature, caffeine amount, and price.
      tags:
      - coffees
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coffee'
              examples:
                ExampleCoffeeDetails:
                  value:
                  - id: 1
                    type: mocha
                    temperature: hot
                    caffeine_amount: 105
                    price: 3.75
                  summary: Example coffee details
          description: ''
  /api/coffees/{id}/:
    get:
      operationId: get_coffee_by_id
      description: Get a coffee by ID. The response includes information about the
        coffee type, temperature, caffeine amount, and price for the coffee.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - coffees
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'
              examples:
                ExampleCoffeeDetails:
                  value:
                    id: 1
                    type: mocha
                    temperature: hot
                    caffeine_amount: '105'
                    price: '3.75'
                  summary: Example coffee details
                  description: A coffee object
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Coffee matches the given query.
                  summary: Not Found
          description: ''
  /api/snacks/:
    get:
      operationId: get_all_snacks
      description: Gets all snacks in the inventory. The response includes information
        about each snack's name and price.
      tags:
      - snacks
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snack'
              examples:
                ExampleSnackDetails:
                  value:
                    id: 1
                    snack_name: muffin
                    price: 3.0
                  summary: Example snack details
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Snack matches the given query.
                  summary: Not Found
          description: ''
  /api/snacks/{id}/:
    get:
      operationId: get_snack_by_id
      description: Get a snack by ID. The response includes information about the
        snack type, the brand name, and price.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - snacks
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snack'
              examples:
                ExampleSnackDetails:
                  value:
                    id: 1
                    product_name: muffin
                    price: 3.0
                  summary: Example snack details
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Snack matches the given query.
                  summary: Not Found
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Coffee:
      type: object
      properties:
        id:
          type: string
          description: The unique identifer of the coffee
        coffee_type:
          type: string
          description: The type of coffee
        temperature:
          type: string
          description: The temperature of the coffee
        caffeine_amount:
          type: integer
          description: The amount of caffeine in the coffee
        price:
          type: number
          format: double
          description: The price of the coffee in USD
      required:
      - caffeine_amount
      - coffee_type
      - id
      - price
      - temperature
    Snack:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the snack
        snack_name:
          type: string
          description: The name of the snack
        price:
          type: number
          format: double
          description: The price of the coffee in USD
      required:
      - id
      - price
      - snack_name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
        Bearer {token}"'
tags:
- name: coffees
  description: Represents a coffee drink in the Brew Ha Ha inventory.
- name: snacks
  description: Represents a snack in the Brew Ha Ha inventory.
- name: token
  description: Use these endpoints generate a JSON Web Token (JWT) to authenticate
    your credentials.

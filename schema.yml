openapi: 3.0.3
info:
  title: The Brew Ha Ha API
  version: 1.0.0
  description: The Brew Ha Ha API allows third-party applications to access our extensive
    line of coffee and snack products. As a developer, you can access various endpoints
    to get a single product, get a collection of products, or place orders. Our API
    enables seamless integration with popular e-commerce platforms such as Shopify,
    Wix, and Square.
paths:
  /api/orders/:
    post:
      operationId: create_order
      description: Order available products from the database
      tags:
      - orders
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SuccessfulResponse:
                  value:
                    results:
                    - payment_method: Credit
                      order_items:
                      - product_id: 1
                        quantity: 2
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/products/:
    get:
      operationId: list_products
      description: Returns a single product from the database
      tags:
      - products
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SuccessfulResponse:
                  value:
                    results:
                    - id: 1
                      product_name: mocha
                      temperature: hot
                      caffeine_amount: 105
                      price: 3.75
                      description: A rich, decadent blend of espresso and chocolate
                      quantity: 8
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No product matches the given query.
                  summary: Not Found
          description: ''
  /api/products/{id}/:
    get:
      operationId: retrieve_products
      description: Returns a list of all products in the database
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - products
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SuccessfulResponse:
                  value:
                    results:
                    - id: 1
                      product_name: mocha
                      temperature: hot
                      caffeine_amount: 105
                      price: 3.75
                      description: A rich, decadent blend of espresso and chocolate
                      quantity: 8
                    - id: 2
                      product_name: muffin
                      price: 2.5
                      description: A fluffy, warm blueberry muffin
                      quantity: 5
                    - id: 3
                      product_name: cortado
                      temperature: hot
                      caffeine_amount: 130
                      price: 4.0
                      description: Made with beans picked from the coast of Spain
                      quantity: 5
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No product matches the given query.
                  summary: Not Found
          description: ''
  /api/tokens/:
    post:
      operationId: tokens_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/tokens/refresh/:
    post:
      operationId: tokens_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
        Bearer {token}"'
tags:
- name: tokens
  description: Use these endpoints generate a JSON Web Token (JWT) to authenticate
    your credentials.
- name: orders
  description: Use this endpoint to submit a new order.
- name: products
  description: Use this endpoint to get a single product or a list of products from
    the database.

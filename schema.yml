openapi: 3.0.3
info:
  title: The Brew Ha Ha API
  version: 1.0.0
  description: The Brew Ha Ha API allows third-party applications to access our extensive
    line of coffee and snack products. As a developer, you can access various endpoints
    to get a single product, get a collection of products, or place orders. Our API
    enables seamless integration with popular e-commerce platforms such as Shopify,
    Wix, and Square.
paths:
  /api/coffees/:
    get:
      operationId: list_coffees
      description: Returns a list of all coffee objects in the database
      tags:
      - coffees
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SuccessfulResponse:
                  value:
                    results:
                    - id: 1
                      coffee_type: mocha
                      temperature: hot
                      caffeine_amount: 105
                      price: 3.75
                      description: A rich, decadent blend of espresso and chocolate
                      in_stock: true
                    - id: '2'
                      coffee_type: latte
                      temperature: hot
                      caffeine_amount: 95
                      price: 2.5
                      description: Rich and smooth brew with a hint of caramel
                      in_stock: false
                    - id: '3'
                      coffee_type: cortado
                      temperature: hot
                      caffeine_amount: 130
                      price: 4.0
                      description: Made with beans picked from the coast of Spain
                      in_stock: true
                  summary: Successful Response
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Coffee matches the given query.
                  summary: Not Found
          description: ''
  /api/coffees/{id}/:
    get:
      operationId: retrieve_coffee
      description: Returns a single coffee object based on its ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this coffee.
        required: true
      tags:
      - coffees
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'
              examples:
                ExampleCoffeeDetails:
                  value:
                    id: 1
                    coffee_type: mocha
                    temperature: hot
                    cafeine_amount: 105
                    price: 3.75
                    description: A rich, decadent blend of espresso and chocolate
                    in_stock: true
                  summary: Example coffee details
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Coffee matches the given query.
                  summary: Not Found
          description: ''
  /api/snacks/:
    get:
      operationId: list_snacks
      description: Returns a list of all snack objects in the database
      tags:
      - snacks
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ExampleSnackDetails:
                  value:
                    results:
                    - id: 1
                      snack_type: blueberry_muffin
                      price: 3.0
                      description: Freshly baked muffin with ripe blue blueberries
                      in_stock: true
                    - id: 2
                      snack_type: cinnamon_bagel
                      price: 1.5
                      description: A buttery soft bagel with decadent swirls of cinnamon
                      in_stock: true
                    - id: 3
                      snack_type: croissant
                      price: 2.0
                      description: A flaky croissant sure to delight
                      in_stock: false
                  summary: Example snack details
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Snack matches the given query.
                  summary: Not Found
          description: ''
  /api/snacks/{id}/:
    get:
      operationId: retrieve_snack
      description: Returns a single snack object based on its ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this snack.
        required: true
      tags:
      - snacks
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snack'
              examples:
                ExampleSnackDetails:
                  value:
                    id: 3
                    snack_type: croissant
                    price: 2.0
                    description: A flaky croissant sure to delight
                    in_stock: false
                  summary: Example snack details
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: The request body could not be read properly.
                  summary: Bad Request
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotFound:
                  value:
                    detail: No Snack matches the given query.
                  summary: Not Found
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Coffee:
      type: object
      description: |-
        Serializer for the coffee model.

        Converts Coffee model instances into JSON format.

        Fields:
            id (int): A unique integer value identifying this coffee.
            coffee_name (str): The name or type of the coffee, e.g., 'Espresso', 'Latte'.
            temperature (str): The serving temperature of the coffee, e.g., 'Hot', 'Iced'.
            caffeine_amount (int): The amount of caffeine in milligrams.
            price (float): The price of the coffee in USD.
            description (str): A short description of the coffee.
            in_stock (bool): Whether or not the coffee is available for purchase.
      properties:
        id:
          type: string
          description: A unique integer value identifying this coffee.
        coffee_name:
          type: string
          description: The type of coffee
        temperature:
          type: string
          description: The temperature of the coffee
        caffeine_amount:
          type: integer
          description: The amount of caffeine in the coffee
        price:
          type: number
          format: double
          description: The price of the coffee in USD
        description:
          type: string
          description: A description of the coffee
        in_stock:
          type: boolean
          description: Whether or not the coffee is in stock
      required:
      - caffeine_amount
      - coffee_name
      - description
      - id
      - in_stock
      - price
      - temperature
    Snack:
      type: object
      description: |-
        Serializer for the snack model.

        Converts Snack model instances into JSON format.

        Fields:
            id (int): The unique identifier for the snack.
            snack_name (str): The name of the snack, e.g. 'Muffin', 'Chips'
            price (float): The price of the snack in USD.
            description (str): A short description of the snack.
            in_stock (bool): Whether or not the coffee is available for purchase.
      properties:
        id:
          type: string
          description: The unique identifier for the snack
        snack_name:
          type: string
          description: The name of the snack
        price:
          type: number
          format: double
          description: The price of the snack in USD
        description:
          type: string
          description: A description of the snack
        in_stock:
          type: boolean
          description: Whether or not the snack is in stock
      required:
      - description
      - id
      - in_stock
      - price
      - snack_name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
        Bearer {token}"'
tags:
- name: coffees
  description: Represents coffees in the Brew Ha Ha inventory.
- name: snacks
  description: Represents snacks in the Brew Ha Ha inventory.
- name: token
  description: Use these endpoints generate a JSON Web Token (JWT) to authenticate
    your credentials.
